buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven-publish'
sourceSets {
    main {
        sourceSets { main { output.resourcesDir = output.classesDir } }
        java {
            srcDirs = ['src/main/java']
        }
    }
}
repositories {
    ivy {

        name 'Forge FS legacy'
        artifactPattern "http://files.minecraftforge.net/[module]/[module]-dev-[revision].[ext]"
    }

    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'MinecraftS3'
        url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // the repo from which to get NEI and stuff
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven {

        url  'http://maven.cil.li/'
    }


}

ext.configFile = file('build.properties')

ext.config = parseConfig(configFile)

group= "com.greyfall.necromantia" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Necromantia"
version = "${config.mc_version}-Carrot 1.0"
if (System.getenv("BUILD_NUMBER")!=null)
    version = "$version-${System.getenv().BUILD_NUMBER}"
if (project.hasProperty("releaseType"))
    if (project.releaseType == "ALPHA")
        version = "alpha-" + version
minecraft {
    version ="${config.mc_version}-${config.forge_version}"
    runDir = "eclipse"


    replace 'GRADLE:VERSION', version
    replaceIn 'LibMisc.java'
}

dependencies {

	compile "codechicken:CodeChickenLib:1.7.10-1.1.3.138:dev"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.7.46:dev"
    compile "mcp.mobius.waila:Waila:1.5.11-RC1_1.7.10:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.5.110:dev"
    compile "mantle:Mantle:1.7.10-0.3.2.jenkins187:deobf"
    compile "tconstruct:TConstruct:1.7.10-1.8.5.build958:deobf" // TiCon
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.4.13:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task apiJar(type: Jar) {
    from fileTree(dir: 'src/main/java').matching { include 'com/greyfall/necromantia/api/**' }
    classifier = 'api'
}


task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}


def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

publishing {
    publications {
        main(MavenPublication) {
            groupId 'com.greyfall.necromantia'
            artifactId 'Necromantia'
            from components.java
        }
        api(MavenPublication) {
            groupId 'com.greyfall.necromantia'
            artifactId 'Necromantia'
            artifact apiJar
        }
        dev(MavenPublication) {
            groupId 'com.greyfall.necromantia'
            artifactId 'Necromantia'
            artifact deobfJar
        }
        sources(MavenPublication) {
            groupId 'com.greyfall.necromantia'
            artifactId 'Necromantia'
            artifact sourcesJar
        }

    }
    repositories {
        maven {
            url "/var/www/maven/"
        }
    }
}
